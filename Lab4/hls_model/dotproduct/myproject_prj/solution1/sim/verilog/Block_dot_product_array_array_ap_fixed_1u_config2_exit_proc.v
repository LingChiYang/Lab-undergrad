// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_dot_product_array_array_ap_fixed_1u_config2_exit_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        layer2_out_V_data_0_V_TDATA,
        layer2_out_V_data_0_V_TVALID,
        layer2_out_V_data_0_V_TREADY
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
output  [31:0] layer2_out_V_data_0_V_TDATA;
output   layer2_out_V_data_0_V_TVALID;
input   layer2_out_V_data_0_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    layer2_out_V_data_0_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    ap_block_state1;
wire    regslice_both_layer2_out_V_data_0_V_U_apdone_blk;
reg   [1:0] ap_NS_fsm;
reg    layer2_out_V_data_0_V_TVALID_int;
wire    layer2_out_V_data_0_V_TREADY_int;
wire    regslice_both_layer2_out_V_data_0_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

regslice_both #(
    .DataWidth( 32 ))
regslice_both_layer2_out_V_data_0_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(p_read),
    .vld_in(layer2_out_V_data_0_V_TVALID_int),
    .ack_in(layer2_out_V_data_0_V_TREADY_int),
    .data_out(layer2_out_V_data_0_V_TDATA),
    .vld_out(regslice_both_layer2_out_V_data_0_V_U_vld_out),
    .ack_out(layer2_out_V_data_0_V_TREADY),
    .apdone_blk(regslice_both_layer2_out_V_data_0_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((layer2_out_V_data_0_V_TREADY_int == 1'b0) | (regslice_both_layer2_out_V_data_0_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((~((layer2_out_V_data_0_V_TREADY_int == 1'b0) | (regslice_both_layer2_out_V_data_0_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((layer2_out_V_data_0_V_TREADY_int == 1'b0) | (regslice_both_layer2_out_V_data_0_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        layer2_out_V_data_0_V_TDATA_blk_n = layer2_out_V_data_0_V_TREADY_int;
    end else begin
        layer2_out_V_data_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (layer2_out_V_data_0_V_TREADY_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer2_out_V_data_0_V_TVALID_int = 1'b1;
    end else begin
        layer2_out_V_data_0_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (layer2_out_V_data_0_V_TREADY_int == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((layer2_out_V_data_0_V_TREADY_int == 1'b0) | (regslice_both_layer2_out_V_data_0_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign layer2_out_V_data_0_V_TVALID = regslice_both_layer2_out_V_data_0_V_U_vld_out;

endmodule //Block_dot_product_array_array_ap_fixed_1u_config2_exit_proc
