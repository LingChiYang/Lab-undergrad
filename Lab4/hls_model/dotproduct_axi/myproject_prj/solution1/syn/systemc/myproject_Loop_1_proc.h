// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _myproject_Loop_1_proc_HH_
#define _myproject_Loop_1_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "myproject_axi_mul_15s_32s_47_5_1.h"
#include "myproject_Loop_1_proc_w2_V.h"

namespace ap_rtl {

struct myproject_Loop_1_proc : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > tmpdata1_data_V_dout;
    sc_in< sc_logic > tmpdata1_data_V_empty_n;
    sc_out< sc_logic > tmpdata1_data_V_read;
    sc_out< sc_lv<32> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    myproject_Loop_1_proc(sc_module_name name);
    SC_HAS_PROCESS(myproject_Loop_1_proc);

    ~myproject_Loop_1_proc();

    sc_trace_file* mVcdFile;

    myproject_Loop_1_proc_w2_V* w2_V_U;
    myproject_axi_mul_15s_32s_47_5_1<1,5,15,32,47>* myproject_axi_mul_15s_32s_47_5_1_U78;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > w2_V_address0;
    sc_signal< sc_logic > w2_V_ce0;
    sc_signal< sc_lv<15> > w2_V_q0;
    sc_signal< sc_logic > tmpdata1_data_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<6> > i_fu_86_p2;
    sc_signal< sc_lv<6> > i_reg_139;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln24_fu_80_p2;
    sc_signal< sc_lv<32> > tmpdata1_data_V_read_reg_149;
    sc_signal< sc_lv<15> > w2_V_load_reg_154;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<47> > grp_fu_103_p2;
    sc_signal< sc_lv<47> > r_V_reg_169;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<32> > p_Val2_s_reg_57;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<6> > i_0_i_reg_69;
    sc_signal< sc_lv<64> > zext_ln25_fu_92_p1;
    sc_signal< sc_lv<48> > lhs_V_fu_112_p3;
    sc_signal< sc_lv<48> > sext_ln1118_1_fu_109_p1;
    sc_signal< sc_lv<48> > ret_V_fu_120_p2;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_state8;
    static const sc_lv<9> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_2F;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_i_fu_86_p2();
    void thread_icmp_ln24_fu_80_p2();
    void thread_lhs_V_fu_112_p3();
    void thread_ret_V_fu_120_p2();
    void thread_sext_ln1118_1_fu_109_p1();
    void thread_tmpdata1_data_V_blk_n();
    void thread_tmpdata1_data_V_read();
    void thread_w2_V_address0();
    void thread_w2_V_ce0();
    void thread_zext_ln25_fu_92_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
