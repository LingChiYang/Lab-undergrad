// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "myproject_Loop_1_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic myproject_Loop_1_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic myproject_Loop_1_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> myproject_Loop_1_proc::ap_ST_fsm_state1 = "1";
const sc_lv<9> myproject_Loop_1_proc::ap_ST_fsm_state2 = "10";
const sc_lv<9> myproject_Loop_1_proc::ap_ST_fsm_state3 = "100";
const sc_lv<9> myproject_Loop_1_proc::ap_ST_fsm_state4 = "1000";
const sc_lv<9> myproject_Loop_1_proc::ap_ST_fsm_state5 = "10000";
const sc_lv<9> myproject_Loop_1_proc::ap_ST_fsm_state6 = "100000";
const sc_lv<9> myproject_Loop_1_proc::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> myproject_Loop_1_proc::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> myproject_Loop_1_proc::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> myproject_Loop_1_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> myproject_Loop_1_proc::ap_const_lv32_2 = "10";
const sc_lv<32> myproject_Loop_1_proc::ap_const_lv32_1 = "1";
const sc_lv<32> myproject_Loop_1_proc::ap_const_lv32_3 = "11";
const sc_lv<32> myproject_Loop_1_proc::ap_const_lv32_7 = "111";
const sc_lv<32> myproject_Loop_1_proc::ap_const_lv32_8 = "1000";
const sc_lv<6> myproject_Loop_1_proc::ap_const_lv6_0 = "000000";
const sc_lv<6> myproject_Loop_1_proc::ap_const_lv6_20 = "100000";
const sc_lv<6> myproject_Loop_1_proc::ap_const_lv6_1 = "1";
const sc_lv<16> myproject_Loop_1_proc::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> myproject_Loop_1_proc::ap_const_lv32_10 = "10000";
const sc_lv<32> myproject_Loop_1_proc::ap_const_lv32_2F = "101111";
const sc_lv<1> myproject_Loop_1_proc::ap_const_lv1_1 = "1";
const bool myproject_Loop_1_proc::ap_const_boolean_1 = true;

myproject_Loop_1_proc::myproject_Loop_1_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    w2_V_U = new myproject_Loop_1_proc_w2_V("w2_V_U");
    w2_V_U->clk(ap_clk);
    w2_V_U->reset(ap_rst);
    w2_V_U->address0(w2_V_address0);
    w2_V_U->ce0(w2_V_ce0);
    w2_V_U->q0(w2_V_q0);
    myproject_axi_mul_15s_32s_47_5_1_U78 = new myproject_axi_mul_15s_32s_47_5_1<1,5,15,32,47>("myproject_axi_mul_15s_32s_47_5_1_U78");
    myproject_axi_mul_15s_32s_47_5_1_U78->clk(ap_clk);
    myproject_axi_mul_15s_32s_47_5_1_U78->reset(ap_rst);
    myproject_axi_mul_15s_32s_47_5_1_U78->din0(w2_V_load_reg_154);
    myproject_axi_mul_15s_32s_47_5_1_U78->din1(tmpdata1_data_V_read_reg_149);
    myproject_axi_mul_15s_32s_47_5_1_U78->ce(ap_var_for_const0);
    myproject_axi_mul_15s_32s_47_5_1_U78->dout(grp_fu_103_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln24_fu_80_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln24_fu_80_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln24_fu_80_p2 );
    sensitive << ( p_Val2_s_reg_57 );

    SC_METHOD(thread_i_fu_86_p2);
    sensitive << ( i_0_i_reg_69 );

    SC_METHOD(thread_icmp_ln24_fu_80_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_i_reg_69 );

    SC_METHOD(thread_lhs_V_fu_112_p3);
    sensitive << ( p_Val2_s_reg_57 );

    SC_METHOD(thread_ret_V_fu_120_p2);
    sensitive << ( lhs_V_fu_112_p3 );
    sensitive << ( sext_ln1118_1_fu_109_p1 );

    SC_METHOD(thread_sext_ln1118_1_fu_109_p1);
    sensitive << ( r_V_reg_169 );

    SC_METHOD(thread_tmpdata1_data_V_blk_n);
    sensitive << ( tmpdata1_data_V_empty_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmpdata1_data_V_read);
    sensitive << ( tmpdata1_data_V_empty_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_w2_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln25_fu_92_p1 );

    SC_METHOD(thread_w2_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_zext_ln25_fu_92_p1);
    sensitive << ( i_0_i_reg_69 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmpdata1_data_V_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln24_fu_80_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "myproject_Loop_1_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, tmpdata1_data_V_dout, "(port)tmpdata1_data_V_dout");
    sc_trace(mVcdFile, tmpdata1_data_V_empty_n, "(port)tmpdata1_data_V_empty_n");
    sc_trace(mVcdFile, tmpdata1_data_V_read, "(port)tmpdata1_data_V_read");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, w2_V_address0, "w2_V_address0");
    sc_trace(mVcdFile, w2_V_ce0, "w2_V_ce0");
    sc_trace(mVcdFile, w2_V_q0, "w2_V_q0");
    sc_trace(mVcdFile, tmpdata1_data_V_blk_n, "tmpdata1_data_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_fu_86_p2, "i_fu_86_p2");
    sc_trace(mVcdFile, i_reg_139, "i_reg_139");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln24_fu_80_p2, "icmp_ln24_fu_80_p2");
    sc_trace(mVcdFile, tmpdata1_data_V_read_reg_149, "tmpdata1_data_V_read_reg_149");
    sc_trace(mVcdFile, w2_V_load_reg_154, "w2_V_load_reg_154");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_103_p2, "grp_fu_103_p2");
    sc_trace(mVcdFile, r_V_reg_169, "r_V_reg_169");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, p_Val2_s_reg_57, "p_Val2_s_reg_57");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, i_0_i_reg_69, "i_0_i_reg_69");
    sc_trace(mVcdFile, zext_ln25_fu_92_p1, "zext_ln25_fu_92_p1");
    sc_trace(mVcdFile, lhs_V_fu_112_p3, "lhs_V_fu_112_p3");
    sc_trace(mVcdFile, sext_ln1118_1_fu_109_p1, "sext_ln1118_1_fu_109_p1");
    sc_trace(mVcdFile, ret_V_fu_120_p2, "ret_V_fu_120_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

myproject_Loop_1_proc::~myproject_Loop_1_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete w2_V_U;
    delete myproject_axi_mul_15s_32s_47_5_1_U78;
}

void myproject_Loop_1_proc::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void myproject_Loop_1_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(icmp_ln24_fu_80_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i_0_i_reg_69 = i_reg_139.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_0_i_reg_69 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        p_Val2_s_reg_57 = ret_V_fu_120_p2.read().range(47, 16);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        p_Val2_s_reg_57 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_139 = i_fu_86_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        r_V_reg_169 = grp_fu_103_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmpdata1_data_V_empty_n.read(), ap_const_logic_1))) {
        tmpdata1_data_V_read_reg_149 = tmpdata1_data_V_dout.read();
        w2_V_load_reg_154 = w2_V_q0.read();
    }
}

void myproject_Loop_1_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void myproject_Loop_1_proc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void myproject_Loop_1_proc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void myproject_Loop_1_proc::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void myproject_Loop_1_proc::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void myproject_Loop_1_proc::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void myproject_Loop_1_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void myproject_Loop_1_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln24_fu_80_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void myproject_Loop_1_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void myproject_Loop_1_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln24_fu_80_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void myproject_Loop_1_proc::thread_ap_return() {
    ap_return = p_Val2_s_reg_57.read();
}

void myproject_Loop_1_proc::thread_i_fu_86_p2() {
    i_fu_86_p2 = (!i_0_i_reg_69.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_0_i_reg_69.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void myproject_Loop_1_proc::thread_icmp_ln24_fu_80_p2() {
    icmp_ln24_fu_80_p2 = (!i_0_i_reg_69.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_69.read() == ap_const_lv6_20);
}

void myproject_Loop_1_proc::thread_lhs_V_fu_112_p3() {
    lhs_V_fu_112_p3 = esl_concat<32,16>(p_Val2_s_reg_57.read(), ap_const_lv16_0);
}

void myproject_Loop_1_proc::thread_ret_V_fu_120_p2() {
    ret_V_fu_120_p2 = (!lhs_V_fu_112_p3.read().is_01() || !sext_ln1118_1_fu_109_p1.read().is_01())? sc_lv<48>(): (sc_biguint<48>(lhs_V_fu_112_p3.read()) + sc_bigint<48>(sext_ln1118_1_fu_109_p1.read()));
}

void myproject_Loop_1_proc::thread_sext_ln1118_1_fu_109_p1() {
    sext_ln1118_1_fu_109_p1 = esl_sext<48,47>(r_V_reg_169.read());
}

void myproject_Loop_1_proc::thread_tmpdata1_data_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmpdata1_data_V_blk_n = tmpdata1_data_V_empty_n.read();
    } else {
        tmpdata1_data_V_blk_n = ap_const_logic_1;
    }
}

void myproject_Loop_1_proc::thread_tmpdata1_data_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmpdata1_data_V_empty_n.read(), ap_const_logic_1))) {
        tmpdata1_data_V_read = ap_const_logic_1;
    } else {
        tmpdata1_data_V_read = ap_const_logic_0;
    }
}

void myproject_Loop_1_proc::thread_w2_V_address0() {
    w2_V_address0 =  (sc_lv<5>) (zext_ln25_fu_92_p1.read());
}

void myproject_Loop_1_proc::thread_w2_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        w2_V_ce0 = ap_const_logic_1;
    } else {
        w2_V_ce0 = ap_const_logic_0;
    }
}

void myproject_Loop_1_proc::thread_zext_ln25_fu_92_p1() {
    zext_ln25_fu_92_p1 = esl_zext<64,6>(i_0_i_reg_69.read());
}

void myproject_Loop_1_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln24_fu_80_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmpdata1_data_V_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXX";
            break;
    }
}

}

