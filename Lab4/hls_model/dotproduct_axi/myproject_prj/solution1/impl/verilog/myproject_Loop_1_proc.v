// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        tmpdata1_data_V_dout,
        tmpdata1_data_V_empty_n,
        tmpdata1_data_V_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] tmpdata1_data_V_dout;
input   tmpdata1_data_V_empty_n;
output   tmpdata1_data_V_read;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg tmpdata1_data_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] w2_V_address0;
reg    w2_V_ce0;
wire   [14:0] w2_V_q0;
reg    tmpdata1_data_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [5:0] i_fu_86_p2;
reg   [5:0] i_reg_139;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln24_fu_80_p2;
reg  signed [31:0] tmpdata1_data_V_read_reg_149;
reg  signed [14:0] w2_V_load_reg_154;
wire    ap_CS_fsm_state4;
wire   [46:0] grp_fu_103_p2;
reg   [46:0] r_V_reg_169;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg   [31:0] p_Val2_s_reg_57;
reg    ap_block_state1;
reg   [5:0] i_0_i_reg_69;
wire   [63:0] zext_ln25_fu_92_p1;
wire   [47:0] lhs_V_fu_112_p3;
wire  signed [47:0] sext_ln1118_1_fu_109_p1;
wire   [47:0] ret_V_fu_120_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
end

myproject_Loop_1_proc_w2_V #(
    .DataWidth( 15 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
w2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w2_V_address0),
    .ce0(w2_V_ce0),
    .q0(w2_V_q0)
);

myproject_axi_mul_15s_32s_47_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 47 ))
myproject_axi_mul_15s_32s_47_5_1_U78(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(w2_V_load_reg_154),
    .din1(tmpdata1_data_V_read_reg_149),
    .ce(1'b1),
    .dout(grp_fu_103_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln24_fu_80_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_0_i_reg_69 <= i_reg_139;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_69 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_Val2_s_reg_57 <= {{ret_V_fu_120_p2[47:16]}};
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_reg_57 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_139 <= i_fu_86_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        r_V_reg_169 <= grp_fu_103_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmpdata1_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmpdata1_data_V_read_reg_149 <= tmpdata1_data_V_dout;
        w2_V_load_reg_154 <= w2_V_q0;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_80_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_80_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmpdata1_data_V_blk_n = tmpdata1_data_V_empty_n;
    end else begin
        tmpdata1_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmpdata1_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmpdata1_data_V_read = 1'b1;
    end else begin
        tmpdata1_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w2_V_ce0 = 1'b1;
    end else begin
        w2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln24_fu_80_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmpdata1_data_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_return = p_Val2_s_reg_57;

assign i_fu_86_p2 = (i_0_i_reg_69 + 6'd1);

assign icmp_ln24_fu_80_p2 = ((i_0_i_reg_69 == 6'd32) ? 1'b1 : 1'b0);

assign lhs_V_fu_112_p3 = {{p_Val2_s_reg_57}, {16'd0}};

assign ret_V_fu_120_p2 = ($signed(lhs_V_fu_112_p3) + $signed(sext_ln1118_1_fu_109_p1));

assign sext_ln1118_1_fu_109_p1 = $signed(r_V_reg_169);

assign w2_V_address0 = zext_ln25_fu_92_p1;

assign zext_ln25_fu_92_p1 = i_0_i_reg_69;

endmodule //myproject_Loop_1_proc
